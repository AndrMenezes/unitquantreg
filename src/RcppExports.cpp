// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cpp_dashw
NumericVector cpp_dashw(const NumericVector x, const NumericVector mu, const NumericVector theta, const double tau, const bool logprob);
RcppExport SEXP _unitquantreg_cpp_dashw(SEXP xSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP, SEXP logprobSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool >::type logprob(logprobSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_dashw(x, mu, theta, tau, logprob));
    return rcpp_result_gen;
END_RCPP
}
// cpp_pashw
NumericVector cpp_pashw(const NumericVector x, const NumericVector mu, const NumericVector theta, const double tau, const bool lowertail, const bool logprob);
RcppExport SEXP _unitquantreg_cpp_pashw(SEXP xSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP, SEXP lowertailSEXP, SEXP logprobSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool >::type lowertail(lowertailSEXP);
    Rcpp::traits::input_parameter< const bool >::type logprob(logprobSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_pashw(x, mu, theta, tau, lowertail, logprob));
    return rcpp_result_gen;
END_RCPP
}
// cpp_qashw
NumericVector cpp_qashw(const NumericVector x, const NumericVector mu, const NumericVector theta, const double tau, const bool lowertail, const bool logprob);
RcppExport SEXP _unitquantreg_cpp_qashw(SEXP xSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP, SEXP lowertailSEXP, SEXP logprobSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool >::type lowertail(lowertailSEXP);
    Rcpp::traits::input_parameter< const bool >::type logprob(logprobSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_qashw(x, mu, theta, tau, lowertail, logprob));
    return rcpp_result_gen;
END_RCPP
}
// cpp_loglikeashw
double cpp_loglikeashw(NumericVector x, NumericVector lnx, int n, NumericVector mu, NumericVector theta, double tau);
RcppExport SEXP _unitquantreg_cpp_loglikeashw(SEXP xSEXP, SEXP lnxSEXP, SEXP nSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lnx(lnxSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_loglikeashw(x, lnx, n, mu, theta, tau));
    return rcpp_result_gen;
END_RCPP
}
// cpp_gradientashw
NumericMatrix cpp_gradientashw(int n, NumericVector x, NumericMatrix U, NumericVector dmu_deta, NumericVector dtheta_dzeta, NumericVector mu, NumericVector theta, double tau);
RcppExport SEXP _unitquantreg_cpp_gradientashw(SEXP nSEXP, SEXP xSEXP, SEXP USEXP, SEXP dmu_detaSEXP, SEXP dtheta_dzetaSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type U(USEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dmu_deta(dmu_detaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dtheta_dzeta(dtheta_dzetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_gradientashw(n, x, U, dmu_deta, dtheta_dzeta, mu, theta, tau));
    return rcpp_result_gen;
END_RCPP
}
// cpp_hessianashw
NumericMatrix cpp_hessianashw(int n, NumericVector x, NumericMatrix H, NumericVector mu, NumericVector theta, double tau);
RcppExport SEXP _unitquantreg_cpp_hessianashw(SEXP nSEXP, SEXP xSEXP, SEXP HSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type H(HSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_hessianashw(n, x, H, mu, theta, tau));
    return rcpp_result_gen;
END_RCPP
}
// cpp_djohnsonsb
NumericVector cpp_djohnsonsb(const NumericVector x, const NumericVector mu, const NumericVector theta, const double tau, const bool logprob);
RcppExport SEXP _unitquantreg_cpp_djohnsonsb(SEXP xSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP, SEXP logprobSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool >::type logprob(logprobSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_djohnsonsb(x, mu, theta, tau, logprob));
    return rcpp_result_gen;
END_RCPP
}
// cpp_pjohnsonsb
NumericVector cpp_pjohnsonsb(const NumericVector x, const NumericVector mu, const NumericVector theta, const double tau, const bool lowertail, const bool logprob);
RcppExport SEXP _unitquantreg_cpp_pjohnsonsb(SEXP xSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP, SEXP lowertailSEXP, SEXP logprobSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool >::type lowertail(lowertailSEXP);
    Rcpp::traits::input_parameter< const bool >::type logprob(logprobSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_pjohnsonsb(x, mu, theta, tau, lowertail, logprob));
    return rcpp_result_gen;
END_RCPP
}
// cpp_qjohnsonsb
NumericVector cpp_qjohnsonsb(const NumericVector x, const NumericVector mu, const NumericVector theta, const double tau, const bool lowertail, const bool logprob);
RcppExport SEXP _unitquantreg_cpp_qjohnsonsb(SEXP xSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP, SEXP lowertailSEXP, SEXP logprobSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool >::type lowertail(lowertailSEXP);
    Rcpp::traits::input_parameter< const bool >::type logprob(logprobSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_qjohnsonsb(x, mu, theta, tau, lowertail, logprob));
    return rcpp_result_gen;
END_RCPP
}
// cpp_loglikejohnsonsb
double cpp_loglikejohnsonsb(NumericVector x, NumericVector lnx, int n, NumericVector mu, NumericVector theta, double tau);
RcppExport SEXP _unitquantreg_cpp_loglikejohnsonsb(SEXP xSEXP, SEXP lnxSEXP, SEXP nSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lnx(lnxSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_loglikejohnsonsb(x, lnx, n, mu, theta, tau));
    return rcpp_result_gen;
END_RCPP
}
// cpp_gradientjohnsonsb
NumericMatrix cpp_gradientjohnsonsb(int n, NumericVector x, NumericMatrix U, NumericVector dmu_deta, NumericVector dtheta_dzeta, NumericVector mu, NumericVector theta, double tau);
RcppExport SEXP _unitquantreg_cpp_gradientjohnsonsb(SEXP nSEXP, SEXP xSEXP, SEXP USEXP, SEXP dmu_detaSEXP, SEXP dtheta_dzetaSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type U(USEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dmu_deta(dmu_detaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dtheta_dzeta(dtheta_dzetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_gradientjohnsonsb(n, x, U, dmu_deta, dtheta_dzeta, mu, theta, tau));
    return rcpp_result_gen;
END_RCPP
}
// cpp_hessianjohnsonsb
NumericMatrix cpp_hessianjohnsonsb(int n, NumericVector x, NumericMatrix H, NumericVector mu, NumericVector theta, double tau);
RcppExport SEXP _unitquantreg_cpp_hessianjohnsonsb(SEXP nSEXP, SEXP xSEXP, SEXP HSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type H(HSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_hessianjohnsonsb(n, x, H, mu, theta, tau));
    return rcpp_result_gen;
END_RCPP
}
// cpp_dkum
NumericVector cpp_dkum(const NumericVector x, const NumericVector mu, const NumericVector theta, const double tau, const bool logprob);
RcppExport SEXP _unitquantreg_cpp_dkum(SEXP xSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP, SEXP logprobSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool >::type logprob(logprobSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_dkum(x, mu, theta, tau, logprob));
    return rcpp_result_gen;
END_RCPP
}
// cpp_pkum
NumericVector cpp_pkum(const NumericVector x, const NumericVector mu, const NumericVector theta, const double tau, const bool lowertail, const bool logprob);
RcppExport SEXP _unitquantreg_cpp_pkum(SEXP xSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP, SEXP lowertailSEXP, SEXP logprobSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool >::type lowertail(lowertailSEXP);
    Rcpp::traits::input_parameter< const bool >::type logprob(logprobSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_pkum(x, mu, theta, tau, lowertail, logprob));
    return rcpp_result_gen;
END_RCPP
}
// cpp_qkum
NumericVector cpp_qkum(const NumericVector x, const NumericVector mu, const NumericVector theta, const double tau, const bool lowertail, const bool logprob);
RcppExport SEXP _unitquantreg_cpp_qkum(SEXP xSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP, SEXP lowertailSEXP, SEXP logprobSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool >::type lowertail(lowertailSEXP);
    Rcpp::traits::input_parameter< const bool >::type logprob(logprobSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_qkum(x, mu, theta, tau, lowertail, logprob));
    return rcpp_result_gen;
END_RCPP
}
// cpp_loglikekum
double cpp_loglikekum(NumericVector x, NumericVector lnx, int n, NumericVector mu, NumericVector theta, double tau);
RcppExport SEXP _unitquantreg_cpp_loglikekum(SEXP xSEXP, SEXP lnxSEXP, SEXP nSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lnx(lnxSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_loglikekum(x, lnx, n, mu, theta, tau));
    return rcpp_result_gen;
END_RCPP
}
// cpp_gradientkum
NumericMatrix cpp_gradientkum(int n, NumericVector x, NumericMatrix U, NumericVector dmu_deta, NumericVector dtheta_dzeta, NumericVector mu, NumericVector theta, double tau);
RcppExport SEXP _unitquantreg_cpp_gradientkum(SEXP nSEXP, SEXP xSEXP, SEXP USEXP, SEXP dmu_detaSEXP, SEXP dtheta_dzetaSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type U(USEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dmu_deta(dmu_detaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dtheta_dzeta(dtheta_dzetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_gradientkum(n, x, U, dmu_deta, dtheta_dzeta, mu, theta, tau));
    return rcpp_result_gen;
END_RCPP
}
// cpp_hessiankum
NumericMatrix cpp_hessiankum(int n, NumericVector x, NumericMatrix H, NumericVector mu, NumericVector theta, double tau);
RcppExport SEXP _unitquantreg_cpp_hessiankum(SEXP nSEXP, SEXP xSEXP, SEXP HSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type H(HSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_hessiankum(n, x, H, mu, theta, tau));
    return rcpp_result_gen;
END_RCPP
}
// cpp_dleeg
NumericVector cpp_dleeg(const NumericVector x, const NumericVector mu, const NumericVector theta, const double tau, const bool logprob);
RcppExport SEXP _unitquantreg_cpp_dleeg(SEXP xSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP, SEXP logprobSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool >::type logprob(logprobSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_dleeg(x, mu, theta, tau, logprob));
    return rcpp_result_gen;
END_RCPP
}
// cpp_pleeg
NumericVector cpp_pleeg(const NumericVector x, const NumericVector mu, const NumericVector theta, const double tau, const bool lowertail, const bool logprob);
RcppExport SEXP _unitquantreg_cpp_pleeg(SEXP xSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP, SEXP lowertailSEXP, SEXP logprobSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool >::type lowertail(lowertailSEXP);
    Rcpp::traits::input_parameter< const bool >::type logprob(logprobSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_pleeg(x, mu, theta, tau, lowertail, logprob));
    return rcpp_result_gen;
END_RCPP
}
// cpp_qleeg
NumericVector cpp_qleeg(const NumericVector x, const NumericVector mu, const NumericVector theta, const double tau, const bool lowertail, const bool logprob);
RcppExport SEXP _unitquantreg_cpp_qleeg(SEXP xSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP, SEXP lowertailSEXP, SEXP logprobSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool >::type lowertail(lowertailSEXP);
    Rcpp::traits::input_parameter< const bool >::type logprob(logprobSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_qleeg(x, mu, theta, tau, lowertail, logprob));
    return rcpp_result_gen;
END_RCPP
}
// cpp_loglikeleeg
double cpp_loglikeleeg(NumericVector x, NumericVector lnx, int n, NumericVector mu, NumericVector theta, double tau);
RcppExport SEXP _unitquantreg_cpp_loglikeleeg(SEXP xSEXP, SEXP lnxSEXP, SEXP nSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lnx(lnxSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_loglikeleeg(x, lnx, n, mu, theta, tau));
    return rcpp_result_gen;
END_RCPP
}
// cpp_gradientleeg
NumericMatrix cpp_gradientleeg(int n, NumericVector x, NumericMatrix U, NumericVector dmu_deta, NumericVector dtheta_dzeta, NumericVector mu, NumericVector theta, double tau);
RcppExport SEXP _unitquantreg_cpp_gradientleeg(SEXP nSEXP, SEXP xSEXP, SEXP USEXP, SEXP dmu_detaSEXP, SEXP dtheta_dzetaSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type U(USEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dmu_deta(dmu_detaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dtheta_dzeta(dtheta_dzetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_gradientleeg(n, x, U, dmu_deta, dtheta_dzeta, mu, theta, tau));
    return rcpp_result_gen;
END_RCPP
}
// cpp_hessianleeg
NumericMatrix cpp_hessianleeg(int n, NumericVector x, NumericMatrix H, NumericVector mu, NumericVector theta, double tau);
RcppExport SEXP _unitquantreg_cpp_hessianleeg(SEXP nSEXP, SEXP xSEXP, SEXP HSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type H(HSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_hessianleeg(n, x, H, mu, theta, tau));
    return rcpp_result_gen;
END_RCPP
}
// cpp_dubs
NumericVector cpp_dubs(const NumericVector x, const NumericVector mu, const NumericVector theta, const double tau, const bool logprob);
RcppExport SEXP _unitquantreg_cpp_dubs(SEXP xSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP, SEXP logprobSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool >::type logprob(logprobSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_dubs(x, mu, theta, tau, logprob));
    return rcpp_result_gen;
END_RCPP
}
// cpp_pubs
NumericVector cpp_pubs(const NumericVector x, const NumericVector mu, const NumericVector theta, const double tau, const bool lowertail, const bool logprob);
RcppExport SEXP _unitquantreg_cpp_pubs(SEXP xSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP, SEXP lowertailSEXP, SEXP logprobSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool >::type lowertail(lowertailSEXP);
    Rcpp::traits::input_parameter< const bool >::type logprob(logprobSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_pubs(x, mu, theta, tau, lowertail, logprob));
    return rcpp_result_gen;
END_RCPP
}
// cpp_qubs
NumericVector cpp_qubs(const NumericVector x, const NumericVector mu, const NumericVector theta, const double tau, const bool lowertail, const bool logprob);
RcppExport SEXP _unitquantreg_cpp_qubs(SEXP xSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP, SEXP lowertailSEXP, SEXP logprobSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool >::type lowertail(lowertailSEXP);
    Rcpp::traits::input_parameter< const bool >::type logprob(logprobSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_qubs(x, mu, theta, tau, lowertail, logprob));
    return rcpp_result_gen;
END_RCPP
}
// cpp_loglikeubs
double cpp_loglikeubs(NumericVector x, NumericVector lnx, int n, NumericVector mu, NumericVector theta, double tau);
RcppExport SEXP _unitquantreg_cpp_loglikeubs(SEXP xSEXP, SEXP lnxSEXP, SEXP nSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lnx(lnxSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_loglikeubs(x, lnx, n, mu, theta, tau));
    return rcpp_result_gen;
END_RCPP
}
// cpp_gradientubs
NumericMatrix cpp_gradientubs(int n, NumericVector x, NumericMatrix U, NumericVector dmu_deta, NumericVector dtheta_dzeta, NumericVector mu, NumericVector theta, double tau);
RcppExport SEXP _unitquantreg_cpp_gradientubs(SEXP nSEXP, SEXP xSEXP, SEXP USEXP, SEXP dmu_detaSEXP, SEXP dtheta_dzetaSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type U(USEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dmu_deta(dmu_detaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dtheta_dzeta(dtheta_dzetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_gradientubs(n, x, U, dmu_deta, dtheta_dzeta, mu, theta, tau));
    return rcpp_result_gen;
END_RCPP
}
// cpp_hessianubs
NumericMatrix cpp_hessianubs(int n, NumericVector x, NumericMatrix H, NumericVector mu, NumericVector theta, double tau);
RcppExport SEXP _unitquantreg_cpp_hessianubs(SEXP nSEXP, SEXP xSEXP, SEXP HSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type H(HSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_hessianubs(n, x, H, mu, theta, tau));
    return rcpp_result_gen;
END_RCPP
}
// cpp_duburrxii
NumericVector cpp_duburrxii(const NumericVector x, const NumericVector mu, const NumericVector theta, const double tau, const bool logprob);
RcppExport SEXP _unitquantreg_cpp_duburrxii(SEXP xSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP, SEXP logprobSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool >::type logprob(logprobSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_duburrxii(x, mu, theta, tau, logprob));
    return rcpp_result_gen;
END_RCPP
}
// cpp_puburrxii
NumericVector cpp_puburrxii(const NumericVector x, const NumericVector mu, const NumericVector theta, const double tau, const bool lowertail, const bool logprob);
RcppExport SEXP _unitquantreg_cpp_puburrxii(SEXP xSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP, SEXP lowertailSEXP, SEXP logprobSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool >::type lowertail(lowertailSEXP);
    Rcpp::traits::input_parameter< const bool >::type logprob(logprobSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_puburrxii(x, mu, theta, tau, lowertail, logprob));
    return rcpp_result_gen;
END_RCPP
}
// cpp_quburrxii
NumericVector cpp_quburrxii(const NumericVector x, const NumericVector mu, const NumericVector theta, const double tau, const bool lowertail, const bool logprob);
RcppExport SEXP _unitquantreg_cpp_quburrxii(SEXP xSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP, SEXP lowertailSEXP, SEXP logprobSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool >::type lowertail(lowertailSEXP);
    Rcpp::traits::input_parameter< const bool >::type logprob(logprobSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_quburrxii(x, mu, theta, tau, lowertail, logprob));
    return rcpp_result_gen;
END_RCPP
}
// cpp_loglikeuburrxii
double cpp_loglikeuburrxii(NumericVector x, NumericVector lnx, int n, NumericVector mu, NumericVector theta, double tau);
RcppExport SEXP _unitquantreg_cpp_loglikeuburrxii(SEXP xSEXP, SEXP lnxSEXP, SEXP nSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lnx(lnxSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_loglikeuburrxii(x, lnx, n, mu, theta, tau));
    return rcpp_result_gen;
END_RCPP
}
// cpp_gradientuburrxii
NumericMatrix cpp_gradientuburrxii(int n, NumericVector x, NumericMatrix U, NumericVector dmu_deta, NumericVector dtheta_dzeta, NumericVector mu, NumericVector theta, double tau);
RcppExport SEXP _unitquantreg_cpp_gradientuburrxii(SEXP nSEXP, SEXP xSEXP, SEXP USEXP, SEXP dmu_detaSEXP, SEXP dtheta_dzetaSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type U(USEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dmu_deta(dmu_detaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dtheta_dzeta(dtheta_dzetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_gradientuburrxii(n, x, U, dmu_deta, dtheta_dzeta, mu, theta, tau));
    return rcpp_result_gen;
END_RCPP
}
// cpp_hessianuburrxii
NumericMatrix cpp_hessianuburrxii(int n, NumericVector x, NumericMatrix H, NumericVector mu, NumericVector theta, double tau);
RcppExport SEXP _unitquantreg_cpp_hessianuburrxii(SEXP nSEXP, SEXP xSEXP, SEXP HSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type H(HSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_hessianuburrxii(n, x, H, mu, theta, tau));
    return rcpp_result_gen;
END_RCPP
}
// cpp_duchen
NumericVector cpp_duchen(const NumericVector x, const NumericVector mu, const NumericVector theta, const double tau, const bool logprob);
RcppExport SEXP _unitquantreg_cpp_duchen(SEXP xSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP, SEXP logprobSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool >::type logprob(logprobSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_duchen(x, mu, theta, tau, logprob));
    return rcpp_result_gen;
END_RCPP
}
// cpp_puchen
NumericVector cpp_puchen(const NumericVector x, const NumericVector mu, const NumericVector theta, const double tau, const bool lowertail, const bool logprob);
RcppExport SEXP _unitquantreg_cpp_puchen(SEXP xSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP, SEXP lowertailSEXP, SEXP logprobSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool >::type lowertail(lowertailSEXP);
    Rcpp::traits::input_parameter< const bool >::type logprob(logprobSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_puchen(x, mu, theta, tau, lowertail, logprob));
    return rcpp_result_gen;
END_RCPP
}
// cpp_quchen
NumericVector cpp_quchen(const NumericVector x, const NumericVector mu, const NumericVector theta, const double tau, const bool lowertail, const bool logprob);
RcppExport SEXP _unitquantreg_cpp_quchen(SEXP xSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP, SEXP lowertailSEXP, SEXP logprobSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool >::type lowertail(lowertailSEXP);
    Rcpp::traits::input_parameter< const bool >::type logprob(logprobSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_quchen(x, mu, theta, tau, lowertail, logprob));
    return rcpp_result_gen;
END_RCPP
}
// cpp_loglikeuchen
double cpp_loglikeuchen(NumericVector x, NumericVector lnx, int n, NumericVector mu, NumericVector theta, double tau);
RcppExport SEXP _unitquantreg_cpp_loglikeuchen(SEXP xSEXP, SEXP lnxSEXP, SEXP nSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lnx(lnxSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_loglikeuchen(x, lnx, n, mu, theta, tau));
    return rcpp_result_gen;
END_RCPP
}
// cpp_gradientuchen
NumericMatrix cpp_gradientuchen(int n, NumericVector x, NumericMatrix U, NumericVector dmu_deta, NumericVector dtheta_dzeta, NumericVector mu, NumericVector theta, double tau);
RcppExport SEXP _unitquantreg_cpp_gradientuchen(SEXP nSEXP, SEXP xSEXP, SEXP USEXP, SEXP dmu_detaSEXP, SEXP dtheta_dzetaSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type U(USEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dmu_deta(dmu_detaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dtheta_dzeta(dtheta_dzetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_gradientuchen(n, x, U, dmu_deta, dtheta_dzeta, mu, theta, tau));
    return rcpp_result_gen;
END_RCPP
}
// cpp_hessianuchen
NumericMatrix cpp_hessianuchen(int n, NumericVector x, NumericMatrix H, NumericVector mu, NumericVector theta, double tau);
RcppExport SEXP _unitquantreg_cpp_hessianuchen(SEXP nSEXP, SEXP xSEXP, SEXP HSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type H(HSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_hessianuchen(n, x, H, mu, theta, tau));
    return rcpp_result_gen;
END_RCPP
}
// cpp_dughne
NumericVector cpp_dughne(const NumericVector x, const NumericVector mu, const NumericVector theta, const double tau, const bool logprob);
RcppExport SEXP _unitquantreg_cpp_dughne(SEXP xSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP, SEXP logprobSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool >::type logprob(logprobSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_dughne(x, mu, theta, tau, logprob));
    return rcpp_result_gen;
END_RCPP
}
// cpp_pughne
NumericVector cpp_pughne(const NumericVector x, const NumericVector mu, const NumericVector theta, const double tau, const bool lowertail, const bool logprob);
RcppExport SEXP _unitquantreg_cpp_pughne(SEXP xSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP, SEXP lowertailSEXP, SEXP logprobSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool >::type lowertail(lowertailSEXP);
    Rcpp::traits::input_parameter< const bool >::type logprob(logprobSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_pughne(x, mu, theta, tau, lowertail, logprob));
    return rcpp_result_gen;
END_RCPP
}
// cpp_qughne
NumericVector cpp_qughne(const NumericVector x, const NumericVector mu, const NumericVector theta, const double tau, const bool lowertail, const bool logprob);
RcppExport SEXP _unitquantreg_cpp_qughne(SEXP xSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP, SEXP lowertailSEXP, SEXP logprobSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool >::type lowertail(lowertailSEXP);
    Rcpp::traits::input_parameter< const bool >::type logprob(logprobSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_qughne(x, mu, theta, tau, lowertail, logprob));
    return rcpp_result_gen;
END_RCPP
}
// cpp_loglikeughne
double cpp_loglikeughne(NumericVector x, NumericVector lnx, int n, NumericVector mu, NumericVector theta, double tau);
RcppExport SEXP _unitquantreg_cpp_loglikeughne(SEXP xSEXP, SEXP lnxSEXP, SEXP nSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lnx(lnxSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_loglikeughne(x, lnx, n, mu, theta, tau));
    return rcpp_result_gen;
END_RCPP
}
// cpp_gradientughne
NumericMatrix cpp_gradientughne(int n, NumericVector x, NumericMatrix U, NumericVector dmu_deta, NumericVector dtheta_dzeta, NumericVector mu, NumericVector theta, double tau);
RcppExport SEXP _unitquantreg_cpp_gradientughne(SEXP nSEXP, SEXP xSEXP, SEXP USEXP, SEXP dmu_detaSEXP, SEXP dtheta_dzetaSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type U(USEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dmu_deta(dmu_detaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dtheta_dzeta(dtheta_dzetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_gradientughne(n, x, U, dmu_deta, dtheta_dzeta, mu, theta, tau));
    return rcpp_result_gen;
END_RCPP
}
// cpp_hessianughne
NumericMatrix cpp_hessianughne(int n, NumericVector x, NumericMatrix H, NumericVector mu, NumericVector theta, double tau);
RcppExport SEXP _unitquantreg_cpp_hessianughne(SEXP nSEXP, SEXP xSEXP, SEXP HSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type H(HSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_hessianughne(n, x, H, mu, theta, tau));
    return rcpp_result_gen;
END_RCPP
}
// cpp_dughnx
NumericVector cpp_dughnx(const NumericVector x, const NumericVector mu, const NumericVector theta, const double tau, const bool logprob);
RcppExport SEXP _unitquantreg_cpp_dughnx(SEXP xSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP, SEXP logprobSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool >::type logprob(logprobSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_dughnx(x, mu, theta, tau, logprob));
    return rcpp_result_gen;
END_RCPP
}
// cpp_pughnx
NumericVector cpp_pughnx(const NumericVector x, const NumericVector mu, const NumericVector theta, const double tau, const bool lowertail, const bool logprob);
RcppExport SEXP _unitquantreg_cpp_pughnx(SEXP xSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP, SEXP lowertailSEXP, SEXP logprobSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool >::type lowertail(lowertailSEXP);
    Rcpp::traits::input_parameter< const bool >::type logprob(logprobSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_pughnx(x, mu, theta, tau, lowertail, logprob));
    return rcpp_result_gen;
END_RCPP
}
// cpp_qughnx
NumericVector cpp_qughnx(const NumericVector x, const NumericVector mu, const NumericVector theta, const double tau, const bool lowertail, const bool logprob);
RcppExport SEXP _unitquantreg_cpp_qughnx(SEXP xSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP, SEXP lowertailSEXP, SEXP logprobSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool >::type lowertail(lowertailSEXP);
    Rcpp::traits::input_parameter< const bool >::type logprob(logprobSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_qughnx(x, mu, theta, tau, lowertail, logprob));
    return rcpp_result_gen;
END_RCPP
}
// cpp_loglikeughnx
double cpp_loglikeughnx(NumericVector x, NumericVector lnx, int n, NumericVector mu, NumericVector theta, double tau);
RcppExport SEXP _unitquantreg_cpp_loglikeughnx(SEXP xSEXP, SEXP lnxSEXP, SEXP nSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lnx(lnxSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_loglikeughnx(x, lnx, n, mu, theta, tau));
    return rcpp_result_gen;
END_RCPP
}
// cpp_gradientughnx
NumericMatrix cpp_gradientughnx(int n, NumericVector x, NumericMatrix U, NumericVector dmu_deta, NumericVector dtheta_dzeta, NumericVector mu, NumericVector theta, double tau);
RcppExport SEXP _unitquantreg_cpp_gradientughnx(SEXP nSEXP, SEXP xSEXP, SEXP USEXP, SEXP dmu_detaSEXP, SEXP dtheta_dzetaSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type U(USEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dmu_deta(dmu_detaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dtheta_dzeta(dtheta_dzetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_gradientughnx(n, x, U, dmu_deta, dtheta_dzeta, mu, theta, tau));
    return rcpp_result_gen;
END_RCPP
}
// cpp_hessianughnx
NumericMatrix cpp_hessianughnx(int n, NumericVector x, NumericMatrix H, NumericVector mu, NumericVector theta, double tau);
RcppExport SEXP _unitquantreg_cpp_hessianughnx(SEXP nSEXP, SEXP xSEXP, SEXP HSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type H(HSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_hessianughnx(n, x, H, mu, theta, tau));
    return rcpp_result_gen;
END_RCPP
}
// cpp_dugompertz
NumericVector cpp_dugompertz(const NumericVector x, const NumericVector mu, const NumericVector theta, const double tau, const bool logprob);
RcppExport SEXP _unitquantreg_cpp_dugompertz(SEXP xSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP, SEXP logprobSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool >::type logprob(logprobSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_dugompertz(x, mu, theta, tau, logprob));
    return rcpp_result_gen;
END_RCPP
}
// cpp_pugompertz
NumericVector cpp_pugompertz(const NumericVector x, const NumericVector mu, const NumericVector theta, const double tau, const bool lowertail, const bool logprob);
RcppExport SEXP _unitquantreg_cpp_pugompertz(SEXP xSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP, SEXP lowertailSEXP, SEXP logprobSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool >::type lowertail(lowertailSEXP);
    Rcpp::traits::input_parameter< const bool >::type logprob(logprobSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_pugompertz(x, mu, theta, tau, lowertail, logprob));
    return rcpp_result_gen;
END_RCPP
}
// cpp_qugompertz
NumericVector cpp_qugompertz(const NumericVector x, const NumericVector mu, const NumericVector theta, const double tau, const bool lowertail, const bool logprob);
RcppExport SEXP _unitquantreg_cpp_qugompertz(SEXP xSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP, SEXP lowertailSEXP, SEXP logprobSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool >::type lowertail(lowertailSEXP);
    Rcpp::traits::input_parameter< const bool >::type logprob(logprobSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_qugompertz(x, mu, theta, tau, lowertail, logprob));
    return rcpp_result_gen;
END_RCPP
}
// cpp_loglikeugompertz
double cpp_loglikeugompertz(NumericVector x, NumericVector lnx, int n, NumericVector mu, NumericVector theta, double tau);
RcppExport SEXP _unitquantreg_cpp_loglikeugompertz(SEXP xSEXP, SEXP lnxSEXP, SEXP nSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lnx(lnxSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_loglikeugompertz(x, lnx, n, mu, theta, tau));
    return rcpp_result_gen;
END_RCPP
}
// cpp_gradientugompertz
NumericMatrix cpp_gradientugompertz(int n, NumericVector x, NumericMatrix U, NumericVector dmu_deta, NumericVector dtheta_dzeta, NumericVector mu, NumericVector theta, double tau);
RcppExport SEXP _unitquantreg_cpp_gradientugompertz(SEXP nSEXP, SEXP xSEXP, SEXP USEXP, SEXP dmu_detaSEXP, SEXP dtheta_dzetaSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type U(USEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dmu_deta(dmu_detaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dtheta_dzeta(dtheta_dzetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_gradientugompertz(n, x, U, dmu_deta, dtheta_dzeta, mu, theta, tau));
    return rcpp_result_gen;
END_RCPP
}
// cpp_hessianugompertz
NumericMatrix cpp_hessianugompertz(int n, NumericVector x, NumericMatrix H, NumericVector mu, NumericVector theta, double tau);
RcppExport SEXP _unitquantreg_cpp_hessianugompertz(SEXP nSEXP, SEXP xSEXP, SEXP HSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type H(HSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_hessianugompertz(n, x, H, mu, theta, tau));
    return rcpp_result_gen;
END_RCPP
}
// cpp_dugumbel
NumericVector cpp_dugumbel(const NumericVector x, const NumericVector mu, const NumericVector theta, const double tau, const bool logprob);
RcppExport SEXP _unitquantreg_cpp_dugumbel(SEXP xSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP, SEXP logprobSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool >::type logprob(logprobSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_dugumbel(x, mu, theta, tau, logprob));
    return rcpp_result_gen;
END_RCPP
}
// cpp_pugumbel
NumericVector cpp_pugumbel(const NumericVector x, const NumericVector mu, const NumericVector theta, const double tau, const bool lowertail, const bool logprob);
RcppExport SEXP _unitquantreg_cpp_pugumbel(SEXP xSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP, SEXP lowertailSEXP, SEXP logprobSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool >::type lowertail(lowertailSEXP);
    Rcpp::traits::input_parameter< const bool >::type logprob(logprobSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_pugumbel(x, mu, theta, tau, lowertail, logprob));
    return rcpp_result_gen;
END_RCPP
}
// cpp_qugumbel
NumericVector cpp_qugumbel(const NumericVector x, const NumericVector mu, const NumericVector theta, const double tau, const bool lowertail, const bool logprob);
RcppExport SEXP _unitquantreg_cpp_qugumbel(SEXP xSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP, SEXP lowertailSEXP, SEXP logprobSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool >::type lowertail(lowertailSEXP);
    Rcpp::traits::input_parameter< const bool >::type logprob(logprobSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_qugumbel(x, mu, theta, tau, lowertail, logprob));
    return rcpp_result_gen;
END_RCPP
}
// cpp_loglikeugumbel
double cpp_loglikeugumbel(NumericVector x, NumericVector lnx, int n, NumericVector mu, NumericVector theta, double tau);
RcppExport SEXP _unitquantreg_cpp_loglikeugumbel(SEXP xSEXP, SEXP lnxSEXP, SEXP nSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lnx(lnxSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_loglikeugumbel(x, lnx, n, mu, theta, tau));
    return rcpp_result_gen;
END_RCPP
}
// cpp_gradientugumbel
NumericMatrix cpp_gradientugumbel(int n, NumericVector x, NumericMatrix U, NumericVector dmu_deta, NumericVector dtheta_dzeta, NumericVector mu, NumericVector theta, double tau);
RcppExport SEXP _unitquantreg_cpp_gradientugumbel(SEXP nSEXP, SEXP xSEXP, SEXP USEXP, SEXP dmu_detaSEXP, SEXP dtheta_dzetaSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type U(USEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dmu_deta(dmu_detaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dtheta_dzeta(dtheta_dzetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_gradientugumbel(n, x, U, dmu_deta, dtheta_dzeta, mu, theta, tau));
    return rcpp_result_gen;
END_RCPP
}
// cpp_hessianugumbel
NumericMatrix cpp_hessianugumbel(int n, NumericVector x, NumericMatrix H, NumericVector mu, NumericVector theta, double tau);
RcppExport SEXP _unitquantreg_cpp_hessianugumbel(SEXP nSEXP, SEXP xSEXP, SEXP HSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type H(HSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_hessianugumbel(n, x, H, mu, theta, tau));
    return rcpp_result_gen;
END_RCPP
}
// cpp_dulogistic
NumericVector cpp_dulogistic(const NumericVector x, const NumericVector mu, const NumericVector theta, const double tau, const bool logprob);
RcppExport SEXP _unitquantreg_cpp_dulogistic(SEXP xSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP, SEXP logprobSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool >::type logprob(logprobSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_dulogistic(x, mu, theta, tau, logprob));
    return rcpp_result_gen;
END_RCPP
}
// cpp_pulogistic
NumericVector cpp_pulogistic(const NumericVector x, const NumericVector mu, const NumericVector theta, const double tau, const bool lowertail, const bool logprob);
RcppExport SEXP _unitquantreg_cpp_pulogistic(SEXP xSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP, SEXP lowertailSEXP, SEXP logprobSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool >::type lowertail(lowertailSEXP);
    Rcpp::traits::input_parameter< const bool >::type logprob(logprobSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_pulogistic(x, mu, theta, tau, lowertail, logprob));
    return rcpp_result_gen;
END_RCPP
}
// cpp_qulogistic
NumericVector cpp_qulogistic(const NumericVector x, const NumericVector mu, const NumericVector theta, const double tau, const bool lowertail, const bool logprob);
RcppExport SEXP _unitquantreg_cpp_qulogistic(SEXP xSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP, SEXP lowertailSEXP, SEXP logprobSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool >::type lowertail(lowertailSEXP);
    Rcpp::traits::input_parameter< const bool >::type logprob(logprobSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_qulogistic(x, mu, theta, tau, lowertail, logprob));
    return rcpp_result_gen;
END_RCPP
}
// cpp_loglikeulogistic
double cpp_loglikeulogistic(NumericVector x, NumericVector lnx, int n, NumericVector mu, NumericVector theta, double tau);
RcppExport SEXP _unitquantreg_cpp_loglikeulogistic(SEXP xSEXP, SEXP lnxSEXP, SEXP nSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lnx(lnxSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_loglikeulogistic(x, lnx, n, mu, theta, tau));
    return rcpp_result_gen;
END_RCPP
}
// cpp_gradientulogistic
NumericMatrix cpp_gradientulogistic(int n, NumericVector x, NumericMatrix U, NumericVector dmu_deta, NumericVector dtheta_dzeta, NumericVector mu, NumericVector theta, double tau);
RcppExport SEXP _unitquantreg_cpp_gradientulogistic(SEXP nSEXP, SEXP xSEXP, SEXP USEXP, SEXP dmu_detaSEXP, SEXP dtheta_dzetaSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type U(USEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dmu_deta(dmu_detaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dtheta_dzeta(dtheta_dzetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_gradientulogistic(n, x, U, dmu_deta, dtheta_dzeta, mu, theta, tau));
    return rcpp_result_gen;
END_RCPP
}
// cpp_hessianulogistic
NumericMatrix cpp_hessianulogistic(int n, NumericVector x, NumericMatrix H, NumericVector mu, NumericVector theta, double tau);
RcppExport SEXP _unitquantreg_cpp_hessianulogistic(SEXP nSEXP, SEXP xSEXP, SEXP HSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type H(HSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_hessianulogistic(n, x, H, mu, theta, tau));
    return rcpp_result_gen;
END_RCPP
}
// cpp_duweibull
NumericVector cpp_duweibull(const NumericVector x, const NumericVector mu, const NumericVector theta, const double tau, const bool logprob);
RcppExport SEXP _unitquantreg_cpp_duweibull(SEXP xSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP, SEXP logprobSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool >::type logprob(logprobSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_duweibull(x, mu, theta, tau, logprob));
    return rcpp_result_gen;
END_RCPP
}
// cpp_puweibull
NumericVector cpp_puweibull(const NumericVector x, const NumericVector mu, const NumericVector theta, const double tau, const bool lowertail, const bool logprob);
RcppExport SEXP _unitquantreg_cpp_puweibull(SEXP xSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP, SEXP lowertailSEXP, SEXP logprobSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool >::type lowertail(lowertailSEXP);
    Rcpp::traits::input_parameter< const bool >::type logprob(logprobSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_puweibull(x, mu, theta, tau, lowertail, logprob));
    return rcpp_result_gen;
END_RCPP
}
// cpp_quweibull
NumericVector cpp_quweibull(const NumericVector x, const NumericVector mu, const NumericVector theta, const double tau, const bool lowertail, const bool logprob);
RcppExport SEXP _unitquantreg_cpp_quweibull(SEXP xSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP, SEXP lowertailSEXP, SEXP logprobSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const bool >::type lowertail(lowertailSEXP);
    Rcpp::traits::input_parameter< const bool >::type logprob(logprobSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_quweibull(x, mu, theta, tau, lowertail, logprob));
    return rcpp_result_gen;
END_RCPP
}
// cpp_loglikeuweibull
double cpp_loglikeuweibull(NumericVector x, NumericVector lnx, int n, NumericVector mu, NumericVector theta, double tau);
RcppExport SEXP _unitquantreg_cpp_loglikeuweibull(SEXP xSEXP, SEXP lnxSEXP, SEXP nSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lnx(lnxSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_loglikeuweibull(x, lnx, n, mu, theta, tau));
    return rcpp_result_gen;
END_RCPP
}
// cpp_gradientuweibull
NumericMatrix cpp_gradientuweibull(int n, NumericVector x, NumericMatrix U, NumericVector dmu_deta, NumericVector dtheta_dzeta, NumericVector mu, NumericVector theta, double tau);
RcppExport SEXP _unitquantreg_cpp_gradientuweibull(SEXP nSEXP, SEXP xSEXP, SEXP USEXP, SEXP dmu_detaSEXP, SEXP dtheta_dzetaSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type U(USEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dmu_deta(dmu_detaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dtheta_dzeta(dtheta_dzetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_gradientuweibull(n, x, U, dmu_deta, dtheta_dzeta, mu, theta, tau));
    return rcpp_result_gen;
END_RCPP
}
// cpp_hessianuweibull
NumericMatrix cpp_hessianuweibull(int n, NumericVector x, NumericMatrix H, NumericVector mu, NumericVector theta, double tau);
RcppExport SEXP _unitquantreg_cpp_hessianuweibull(SEXP nSEXP, SEXP xSEXP, SEXP HSEXP, SEXP muSEXP, SEXP thetaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type H(HSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_hessianuweibull(n, x, H, mu, theta, tau));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_unitquantreg_cpp_dashw", (DL_FUNC) &_unitquantreg_cpp_dashw, 5},
    {"_unitquantreg_cpp_pashw", (DL_FUNC) &_unitquantreg_cpp_pashw, 6},
    {"_unitquantreg_cpp_qashw", (DL_FUNC) &_unitquantreg_cpp_qashw, 6},
    {"_unitquantreg_cpp_loglikeashw", (DL_FUNC) &_unitquantreg_cpp_loglikeashw, 6},
    {"_unitquantreg_cpp_gradientashw", (DL_FUNC) &_unitquantreg_cpp_gradientashw, 8},
    {"_unitquantreg_cpp_hessianashw", (DL_FUNC) &_unitquantreg_cpp_hessianashw, 6},
    {"_unitquantreg_cpp_djohnsonsb", (DL_FUNC) &_unitquantreg_cpp_djohnsonsb, 5},
    {"_unitquantreg_cpp_pjohnsonsb", (DL_FUNC) &_unitquantreg_cpp_pjohnsonsb, 6},
    {"_unitquantreg_cpp_qjohnsonsb", (DL_FUNC) &_unitquantreg_cpp_qjohnsonsb, 6},
    {"_unitquantreg_cpp_loglikejohnsonsb", (DL_FUNC) &_unitquantreg_cpp_loglikejohnsonsb, 6},
    {"_unitquantreg_cpp_gradientjohnsonsb", (DL_FUNC) &_unitquantreg_cpp_gradientjohnsonsb, 8},
    {"_unitquantreg_cpp_hessianjohnsonsb", (DL_FUNC) &_unitquantreg_cpp_hessianjohnsonsb, 6},
    {"_unitquantreg_cpp_dkum", (DL_FUNC) &_unitquantreg_cpp_dkum, 5},
    {"_unitquantreg_cpp_pkum", (DL_FUNC) &_unitquantreg_cpp_pkum, 6},
    {"_unitquantreg_cpp_qkum", (DL_FUNC) &_unitquantreg_cpp_qkum, 6},
    {"_unitquantreg_cpp_loglikekum", (DL_FUNC) &_unitquantreg_cpp_loglikekum, 6},
    {"_unitquantreg_cpp_gradientkum", (DL_FUNC) &_unitquantreg_cpp_gradientkum, 8},
    {"_unitquantreg_cpp_hessiankum", (DL_FUNC) &_unitquantreg_cpp_hessiankum, 6},
    {"_unitquantreg_cpp_dleeg", (DL_FUNC) &_unitquantreg_cpp_dleeg, 5},
    {"_unitquantreg_cpp_pleeg", (DL_FUNC) &_unitquantreg_cpp_pleeg, 6},
    {"_unitquantreg_cpp_qleeg", (DL_FUNC) &_unitquantreg_cpp_qleeg, 6},
    {"_unitquantreg_cpp_loglikeleeg", (DL_FUNC) &_unitquantreg_cpp_loglikeleeg, 6},
    {"_unitquantreg_cpp_gradientleeg", (DL_FUNC) &_unitquantreg_cpp_gradientleeg, 8},
    {"_unitquantreg_cpp_hessianleeg", (DL_FUNC) &_unitquantreg_cpp_hessianleeg, 6},
    {"_unitquantreg_cpp_dubs", (DL_FUNC) &_unitquantreg_cpp_dubs, 5},
    {"_unitquantreg_cpp_pubs", (DL_FUNC) &_unitquantreg_cpp_pubs, 6},
    {"_unitquantreg_cpp_qubs", (DL_FUNC) &_unitquantreg_cpp_qubs, 6},
    {"_unitquantreg_cpp_loglikeubs", (DL_FUNC) &_unitquantreg_cpp_loglikeubs, 6},
    {"_unitquantreg_cpp_gradientubs", (DL_FUNC) &_unitquantreg_cpp_gradientubs, 8},
    {"_unitquantreg_cpp_hessianubs", (DL_FUNC) &_unitquantreg_cpp_hessianubs, 6},
    {"_unitquantreg_cpp_duburrxii", (DL_FUNC) &_unitquantreg_cpp_duburrxii, 5},
    {"_unitquantreg_cpp_puburrxii", (DL_FUNC) &_unitquantreg_cpp_puburrxii, 6},
    {"_unitquantreg_cpp_quburrxii", (DL_FUNC) &_unitquantreg_cpp_quburrxii, 6},
    {"_unitquantreg_cpp_loglikeuburrxii", (DL_FUNC) &_unitquantreg_cpp_loglikeuburrxii, 6},
    {"_unitquantreg_cpp_gradientuburrxii", (DL_FUNC) &_unitquantreg_cpp_gradientuburrxii, 8},
    {"_unitquantreg_cpp_hessianuburrxii", (DL_FUNC) &_unitquantreg_cpp_hessianuburrxii, 6},
    {"_unitquantreg_cpp_duchen", (DL_FUNC) &_unitquantreg_cpp_duchen, 5},
    {"_unitquantreg_cpp_puchen", (DL_FUNC) &_unitquantreg_cpp_puchen, 6},
    {"_unitquantreg_cpp_quchen", (DL_FUNC) &_unitquantreg_cpp_quchen, 6},
    {"_unitquantreg_cpp_loglikeuchen", (DL_FUNC) &_unitquantreg_cpp_loglikeuchen, 6},
    {"_unitquantreg_cpp_gradientuchen", (DL_FUNC) &_unitquantreg_cpp_gradientuchen, 8},
    {"_unitquantreg_cpp_hessianuchen", (DL_FUNC) &_unitquantreg_cpp_hessianuchen, 6},
    {"_unitquantreg_cpp_dughne", (DL_FUNC) &_unitquantreg_cpp_dughne, 5},
    {"_unitquantreg_cpp_pughne", (DL_FUNC) &_unitquantreg_cpp_pughne, 6},
    {"_unitquantreg_cpp_qughne", (DL_FUNC) &_unitquantreg_cpp_qughne, 6},
    {"_unitquantreg_cpp_loglikeughne", (DL_FUNC) &_unitquantreg_cpp_loglikeughne, 6},
    {"_unitquantreg_cpp_gradientughne", (DL_FUNC) &_unitquantreg_cpp_gradientughne, 8},
    {"_unitquantreg_cpp_hessianughne", (DL_FUNC) &_unitquantreg_cpp_hessianughne, 6},
    {"_unitquantreg_cpp_dughnx", (DL_FUNC) &_unitquantreg_cpp_dughnx, 5},
    {"_unitquantreg_cpp_pughnx", (DL_FUNC) &_unitquantreg_cpp_pughnx, 6},
    {"_unitquantreg_cpp_qughnx", (DL_FUNC) &_unitquantreg_cpp_qughnx, 6},
    {"_unitquantreg_cpp_loglikeughnx", (DL_FUNC) &_unitquantreg_cpp_loglikeughnx, 6},
    {"_unitquantreg_cpp_gradientughnx", (DL_FUNC) &_unitquantreg_cpp_gradientughnx, 8},
    {"_unitquantreg_cpp_hessianughnx", (DL_FUNC) &_unitquantreg_cpp_hessianughnx, 6},
    {"_unitquantreg_cpp_dugompertz", (DL_FUNC) &_unitquantreg_cpp_dugompertz, 5},
    {"_unitquantreg_cpp_pugompertz", (DL_FUNC) &_unitquantreg_cpp_pugompertz, 6},
    {"_unitquantreg_cpp_qugompertz", (DL_FUNC) &_unitquantreg_cpp_qugompertz, 6},
    {"_unitquantreg_cpp_loglikeugompertz", (DL_FUNC) &_unitquantreg_cpp_loglikeugompertz, 6},
    {"_unitquantreg_cpp_gradientugompertz", (DL_FUNC) &_unitquantreg_cpp_gradientugompertz, 8},
    {"_unitquantreg_cpp_hessianugompertz", (DL_FUNC) &_unitquantreg_cpp_hessianugompertz, 6},
    {"_unitquantreg_cpp_dugumbel", (DL_FUNC) &_unitquantreg_cpp_dugumbel, 5},
    {"_unitquantreg_cpp_pugumbel", (DL_FUNC) &_unitquantreg_cpp_pugumbel, 6},
    {"_unitquantreg_cpp_qugumbel", (DL_FUNC) &_unitquantreg_cpp_qugumbel, 6},
    {"_unitquantreg_cpp_loglikeugumbel", (DL_FUNC) &_unitquantreg_cpp_loglikeugumbel, 6},
    {"_unitquantreg_cpp_gradientugumbel", (DL_FUNC) &_unitquantreg_cpp_gradientugumbel, 8},
    {"_unitquantreg_cpp_hessianugumbel", (DL_FUNC) &_unitquantreg_cpp_hessianugumbel, 6},
    {"_unitquantreg_cpp_dulogistic", (DL_FUNC) &_unitquantreg_cpp_dulogistic, 5},
    {"_unitquantreg_cpp_pulogistic", (DL_FUNC) &_unitquantreg_cpp_pulogistic, 6},
    {"_unitquantreg_cpp_qulogistic", (DL_FUNC) &_unitquantreg_cpp_qulogistic, 6},
    {"_unitquantreg_cpp_loglikeulogistic", (DL_FUNC) &_unitquantreg_cpp_loglikeulogistic, 6},
    {"_unitquantreg_cpp_gradientulogistic", (DL_FUNC) &_unitquantreg_cpp_gradientulogistic, 8},
    {"_unitquantreg_cpp_hessianulogistic", (DL_FUNC) &_unitquantreg_cpp_hessianulogistic, 6},
    {"_unitquantreg_cpp_duweibull", (DL_FUNC) &_unitquantreg_cpp_duweibull, 5},
    {"_unitquantreg_cpp_puweibull", (DL_FUNC) &_unitquantreg_cpp_puweibull, 6},
    {"_unitquantreg_cpp_quweibull", (DL_FUNC) &_unitquantreg_cpp_quweibull, 6},
    {"_unitquantreg_cpp_loglikeuweibull", (DL_FUNC) &_unitquantreg_cpp_loglikeuweibull, 6},
    {"_unitquantreg_cpp_gradientuweibull", (DL_FUNC) &_unitquantreg_cpp_gradientuweibull, 8},
    {"_unitquantreg_cpp_hessianuweibull", (DL_FUNC) &_unitquantreg_cpp_hessianuweibull, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_unitquantreg(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
